/*
 * synthesizer.c
 *
 *  Created on: Mar 7, 2015
 *      Author: Dr. Satan
 */

#include "synthesizer.h"

#include <stdio.h>
#include <stdint.h>
#include <stdbool.h>
#include <stdlib.h>
#include <math.h>

/*
 * Square wave generator
 */

static uint16_t initialSquareWavePeriod;
static uint16_t lastSquareWavePeriod;
static uint16_t dutyCycle;
static int32_t squareWavesDuration;
static uint16_t initialSquareWavesAmp;
static uint16_t lastSquareWavesAmp;
static uint16_t square1_half_period;
static uint16_t square1_amplitude;
static uint16_t square1_direction;
static uint16_t square1_sample_idx;
static int32_t square1_progress;
static uint16_t bias;

/*private func declarations*/
static uint16_t square1_get_sample();

void generateSquareWave(square_wave_synth_t note)
{
    uint16_t old_period_end = lastSquareWavePeriod;

    initialSquareWavePeriod = note.initialPeriod / (1 << note.octave);
    lastSquareWavePeriod = note.lastPeriod / (1 << note.octave);
    dutyCycle = note.dutyCycle;
    squareWavesDuration = (note.duration ? note.duration : 1);
    initialSquareWavesAmp = (note.initialAmplitide>MAX_AMPLITUDE) ? (note.initialAmplitide = MAX_AMPLITUDE) : note.initialAmplitide;
    lastSquareWavesAmp = (note.lastAmplitide>MAX_AMPLITUDE) ? (note.lastAmplitide = MAX_AMPLITUDE) : note.lastAmplitide;


    if (initialSquareWavePeriod != old_period_end)
    {
        square1_half_period = (initialSquareWavePeriod * dutyCycle) / 100;
        square1_amplitude = initialSquareWavesAmp;
        square1_direction = !square1_direction;
        square1_sample_idx = 0;
    }
    square1_progress = 0;
}



uint16_t square1_get_sample()
{

    uint16_t sample = (square1_direction ? square1_amplitude : 0);
    bias -= square1_amplitude / 2;

    square1_sample_idx++;
    square1_progress++;
    if (square1_sample_idx >= square1_half_period)
    {
        square1_sample_idx = 0;
        square1_direction = !square1_direction;

        int16_t period_diff = lastSquareWavePeriod - initialSquareWavePeriod;
        uint16_t new_period = initialSquareWavePeriod + (period_diff * square1_progress) / squareWavesDuration;
        square1_half_period = (square1_direction ?
            (new_period * dutyCycle) / 100 :
            new_period - (new_period * dutyCycle) / 100);

        int16_t amp_diff = lastSquareWavesAmp - initialSquareWavesAmp;
        square1_amplitude = initialSquareWavesAmp + (amp_diff * square1_progress) / squareWavesDuration;
    }

    return sample;
}



uint16_t getSample()
{
    uint16_t sample = 0;
    bias = MAX_BIAS;
    sample += square1_get_sample();
    sample += bias;

    return sample;
}

///* create one period at a given freq */
/* create one period at a given freq */
uint16_t sineWave(uint16_t freq, uint16_t sample)
{
  uint16_t buffer;
  
  buffer = (uint16_t) 1024 * (1 + sin((2*3.14159265359*sample*freq)/44100));
  return buffer;

}
